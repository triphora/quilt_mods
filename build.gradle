import dev.triphora.gradle.ConfigurationExtension
import dev.triphora.gradle.Constants
import dev.triphora.gradle.MixinsJsonGenerator
import dev.triphora.gradle.QuiltModJsonGenerator

plugins {
	alias libs.plugins.quilt.loom apply false
	alias libs.plugins.minotaur apply false
	alias libs.plugins.machete apply false
	alias libs.plugins.outlet apply false
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.quiltmc.loom'
	apply plugin: 'com.modrinth.minotaur'
	apply plugin: 'io.github.p03w.machete'
	apply plugin: 'io.github.dexman545.outlet'

	group = Constants.GROUP
	archivesBaseName = project.name

	[
		['Modrinth', 'api.modrinth.com/maven', ['maven.modrinth']],
	].forEach { var mavenInfo ->
		repositories {
			exclusiveContent {
				forRepository {
					maven {
						name = mavenInfo[0]
						url = 'https://' + mavenInfo[1]
					}
				}
				filter {
					mavenInfo[2].forEach { String group ->
						includeGroup group
					}
				}
			}
		}
	}

	loom {
		runtimeOnlyLog4j = project.name != 'clean_logs'
		runs {
			configureEach {
				vmArg '-Dmixin.debug.export=true'
			}
		}
	}

	java.withSourcesJar()

	dependencies {
		minecraft libs.minecraft
		mappings(variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' })
		modApi libs.quilt.loader

		modLocalRuntime(libs.bundles.runtime) {
			transitive = false
		}
	}

	extensions.create('emmod', ConfigurationExtension.class, project)
	task generateResources {
		doLast {
			new MixinsJsonGenerator().create(project)
			new QuiltModJsonGenerator().create(project)
		}
		outputs.dir('build/generated/resources')
	}

	sourcesJar.dependsOn generateResources
	remapJar.dependsOn generateResources

	sourceSets {
		main {
			resources {
				srcDir generateResources
			}
		}
	}

	if (emmod.qsl || emmod.midnightlib) {
		dependencies {
			modApi libs.quilted.fabric.api
		}
	}

	if (emmod.midnightlib) {
		dependencies {
			modApi libs.midnightlib
			include libs.midnightlib
		}
	}

	int javaVersion = emmod.javaVersion.orNull ?: 17

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = javaVersion
		it.sourceCompatibility = javaVersion
	}

	jar.from project.file('LICENSE').exists() ? project.file('LICENSE') : rootProject.file('LICENSE')

	modrinth {
		projectId = emmod.modrinthSlug.orElse project.name
		gameVersions = [libs.versions.minecraft.get()]
		versionName = System.getenv().VERSION_NAME ?: versionNumber
		changelog = System.getenv().CHANGELOG ?: DEFAULT_CHANGELOG
		versionType = System.getenv().VERSION_TYPE ?: DEFAULT_VERSION_TYPE
		uploadFile = remapJar
		additionalFiles = [sourcesJar]
		syncBodyFrom = project.file('README.md').text + '\n' +
			(emmod.qsl || emmod.midnightlib ? rootProject.file('QSL.md').text : '') +
			'\n' + rootProject.file('COMMON.md').text
	}

	tasks.modrinth.doFirst {
		if (emmod.gameVersions) {
			modrinth.gameVersions = emmod.gameVersions
		}

		if (emmod.qsl || emmod.midnightlib) {
			modrinth {
				dependencies {
					required.project 'qsl'
				}
			}
		}

		if (emmod.midnightlib) {
			modrinth {
				dependencies {
					embedded.project 'midnightlib'
					optional.project 'modmenu'
				}
			}
		}
	}

	tasks.modrinth.dependsOn tasks.modrinthSyncBody
	tasks.modrinth.dependsOn { tasks.named('optimizeOutputsOfRemapJar') }
}
